require 'rails_helper'

RSpec.describe OauthController, :type => :controller do
  before(:all) do
    # stub_const("EXPIRATION_WINDOW", 1.day)
    @assertion = "PHNhbWxwOlJlc3BvbnNlIEluUmVzcG9uc2VUbz0iX2ZmZmJjYTEwLWY2NTEtMDEzMS1kNzk0LTNjMTVjMmNhMjc4OCIgSXNzdWVJbnN0YW50PSIyMDE0LTA3LTI1VDE3OjQ5OjU4LjQwOVoiIElEPSJ4TWNfT1RjcXROMS1TM1pod1AuS01MdElySFUiIFZlcnNpb249IjIuMCIgeG1sbnM6c2FtbHA9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpwcm90b2NvbCI+PHNhbWw6SXNzdWVyIHhtbG5zOnNhbWw9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphc3NlcnRpb24iPng8L3NhbWw6SXNzdWVyPjxzYW1scDpTdGF0dXM+PHNhbWxwOlN0YXR1c0NvZGUgVmFsdWU9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDpzdGF0dXM6U3VjY2VzcyIvPjwvc2FtbHA6U3RhdHVzPjxzYW1sOkFzc2VydGlvbiBWZXJzaW9uPSIyLjAiIElzc3VlSW5zdGFudD0iMjAxNC0wNy0yNVQxNzo0OTo1OC40NzJaIiBJRD0iRko3UUctOUllT0JCSkl4TFlyd1ppSGUwQS16IiB4bWxuczpzYW1sPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXNzZXJ0aW9uIj48c2FtbDpJc3N1ZXI+eDwvc2FtbDpJc3N1ZXI+PGRzOlNpZ25hdHVyZSB4bWxuczpkcz0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnIyI+CjxkczpTaWduZWRJbmZvPgo8ZHM6Q2Fub25pY2FsaXphdGlvbk1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvMTAveG1sLWV4Yy1jMTRuIyIvPgo8ZHM6U2lnbmF0dXJlTWV0aG9kIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMC8wOS94bWxkc2lnI3JzYS1zaGExIi8+CjxkczpSZWZlcmVuY2UgVVJJPSIjRko3UUctOUllT0JCSkl4TFlyd1ppSGUwQS16Ij4KPGRzOlRyYW5zZm9ybXM+CjxkczpUcmFuc2Zvcm0gQWxnb3JpdGhtPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjZW52ZWxvcGVkLXNpZ25hdHVyZSIvPgo8ZHM6VHJhbnNmb3JtIEFsZ29yaXRobT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS8xMC94bWwtZXhjLWMxNG4jIi8+CjwvZHM6VHJhbnNmb3Jtcz4KPGRzOkRpZ2VzdE1ldGhvZCBBbGdvcml0aG09Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvMDkveG1sZHNpZyNzaGExIi8+CjxkczpEaWdlc3RWYWx1ZT5IYmhGMlgzdmdwOXNzZVhNaUNoZEhiR2tubkU9PC9kczpEaWdlc3RWYWx1ZT4KPC9kczpSZWZlcmVuY2U+CjwvZHM6U2lnbmVkSW5mbz4KPGRzOlNpZ25hdHVyZVZhbHVlPgpwNEVZcjJKSmg2dG11Tm9XK1NvQlVhL0VKUkQvZkM2Um1vUmpDUXhmUTNVd1d6V3AxWUxUckU0dS9TK0dDTXBuV0RWek1tS2ZvY1RXCmtmSWM2aXhGc3ljNjdZY2loa3dUeURFYXBYOFpYVFR0ZVBEdGFTdnpTVy9oWXNXVENwS0tpVWYyQStpYk02cXlLZWRxNUFSTEk3NC8KYWgzT1B2QWR3N1VNM1o3TGgzQT0KPC9kczpTaWduYXR1cmVWYWx1ZT4KPGRzOktleUluZm8+CjxkczpYNTA5RGF0YT4KPGRzOlg1MDlDZXJ0aWZpY2F0ZT4KTUlJQ1Z6Q0NBY0NnQXdJQkFnSUdBVU5wOFFrVU1BMEdDU3FHU0liM0RRRUJCUVVBTUc4eEN6QUpCZ05WQkFZVEFsVlRNUk13RVFZRApWUVFJRXdwRFlXeHBabTl5Ym1saE1STXdFUVlEVlFRSEV3cEZiV1Z5ZVhacGJHeGxNUTh3RFFZRFZRUUtFd1pCYzNCbGNtRXhGREFTCkJnTlZCQXNUQzBWdVoybHVaV1Z5YVc1bk1ROHdEUVlEVlFRREV3WkJjM0JsY21Fd0hoY05NVFF3TVRBMk1qTTBOREF3V2hjTk1UVXcKTVRBMk1qTTBOREF3V2pCdk1Rc3dDUVlEVlFRR0V3SlZVekVUTUJFR0ExVUVDQk1LUTJGc2FXWnZjbTVwWVRFVE1CRUdBMVVFQnhNSwpSVzFsY25sMmFXeHNaVEVQTUEwR0ExVUVDaE1HUVhOd1pYSmhNUlF3RWdZRFZRUUxFd3RGYm1kcGJtVmxjbWx1WnpFUE1BMEdBMVVFCkF4TUdRWE53WlhKaE1JR2ZNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0R05BRENCaVFLQmdRRFZ4amszeEJoS1dKZkNyUGZhMmZQaXZLalEKZGhLTEc1elJaNW5zaVZhOW94OEJNazF5b2RsMnIxUlFHSjRzcjlpK05LbGFZZjBIQXFtSUg3TkVNT0RrTllFQXlXdkhVa1EyQmFlUwpHSCtWbzJhTFAySWkrWlBuU3V3WHRxaDlCRTc2ZUZDdG5TN0c1dnBxRCt1WkM3b2FkNGYydHNzeFIvTlN2akdnMUZDNGd3SURBUUFCCk1BMEdDU3FHU0liM0RRRUJCUVVBQTRHQkFKVm9vZDBuUmN2N1ltcUVMelBtdDdxdUxzQkJ1YlRic0YyNGU1VU84K2hrVFpBczYwZWQKZVNRSjJMeCtMQ0Z5QlQrZHZFLzVVRWZRWkJ0azl0QWRaS1hLTHozK1VXdnU1U3VtMGIvVytyakVZYWI3MVRLZG12b3kxZEZnUEJ3dgpJNU4rQ3hhMUNySzdFUTlBMzd3bXFLM1FwQi83QUZDblFSMXJrVEgxenp6Vwo8L2RzOlg1MDlDZXJ0aWZpY2F0ZT4KPC9kczpYNTA5RGF0YT4KPGRzOktleVZhbHVlPgo8ZHM6UlNBS2V5VmFsdWU+CjxkczpNb2R1bHVzPgoxY1k1TjhRWVNsaVh3cXozMnRuejRyeW8wSFlTaXh1YzBXZVo3SWxXdmFNZkFUSk5jcUhaZHE5VVVCaWVMSy9ZdmpTcFdtSDlCd0twCmlCK3pSRERnNURXQkFNbHJ4MUpFTmdXbmtoaC9sYU5taXo5aUl2bVQ1MHJzRjdhb2ZRUk8rbmhRclowdXh1YjZhZy9ybVF1NkduZUgKOXJiTE1VZnpVcjR4b05SUXVJTT0KPC9kczpNb2R1bHVzPgo8ZHM6RXhwb25lbnQ+QVFBQjwvZHM6RXhwb25lbnQ+CjwvZHM6UlNBS2V5VmFsdWU+CjwvZHM6S2V5VmFsdWU+CjwvZHM6S2V5SW5mbz4KPC9kczpTaWduYXR1cmU+PHNhbWw6U3ViamVjdD48c2FtbDpOYW1lSUQgRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoxLjE6bmFtZWlkLWZvcm1hdDp1bnNwZWNpZmllZCI+amltbXk8L3NhbWw6TmFtZUlEPjxzYW1sOlN1YmplY3RDb25maXJtYXRpb24gTWV0aG9kPSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6Y206YmVhcmVyIj48c2FtbDpTdWJqZWN0Q29uZmlybWF0aW9uRGF0YSBJblJlc3BvbnNlVG89Il9mZmZiY2ExMC1mNjUxLTAxMzEtZDc5NC0zYzE1YzJjYTI3ODgiIE5vdE9uT3JBZnRlcj0iMjAxNC0wOC0wMVQxNjoyOTo1OC40ODdaIiBSZWNpcGllbnQ9Imh0dHA6Ly8xMjcuMC4wLjE6MzAwMC9hdXRoL3NhbWwvY2FsbGJhY2siLz48L3NhbWw6U3ViamVjdENvbmZpcm1hdGlvbj48L3NhbWw6U3ViamVjdD48c2FtbDpDb25kaXRpb25zIE5vdE9uT3JBZnRlcj0iMjAxNC0wOC0wMVQxNjoyOTo1OC40ODdaIiBOb3RCZWZvcmU9IjIwMTQtMDctMThUMTk6MDk6NTguNDg3WiI+PHNhbWw6QXVkaWVuY2VSZXN0cmljdGlvbj48c2FtbDpBdWRpZW5jZT5odHRwOi8vMTI3LjAuMC4xOjMwMDAvYXV0aC9zYW1sL21ldGFkYXRhPC9zYW1sOkF1ZGllbmNlPjwvc2FtbDpBdWRpZW5jZVJlc3RyaWN0aW9uPjwvc2FtbDpDb25kaXRpb25zPjxzYW1sOkF1dGhuU3RhdGVtZW50IEF1dGhuSW5zdGFudD0iMjAxNC0wNy0yNVQxNzo0OTo1OC40NzJaIiBTZXNzaW9uSW5kZXg9IkZKN1FHLTlJZU9CQkpJeExZcndaaUhlMEEteiI+PHNhbWw6QXV0aG5Db250ZXh0PjxzYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPnVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphYzpjbGFzc2VzOnVuc3BlY2lmaWVkPC9zYW1sOkF1dGhuQ29udGV4dENsYXNzUmVmPjwvc2FtbDpBdXRobkNvbnRleHQ+PC9zYW1sOkF1dGhuU3RhdGVtZW50PjxzYW1sOkF0dHJpYnV0ZVN0YXRlbWVudCB4bWxuczp4cz0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEiPjxzYW1sOkF0dHJpYnV0ZSBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkIiBOYW1lPSJpZCI+PHNhbWw6QXR0cmlidXRlVmFsdWUgeHNpOnR5cGU9InhzOnN0cmluZyIgeG1sbnM6eHNpPSJodHRwOi8vd3d3LnczLm9yZy8yMDAxL1hNTFNjaGVtYS1pbnN0YW5jZSI+Y249amltbXksb3U9VXNlcnMsb3U9QXNwZXJhc29mdCxkYz1kZXYsZGM9YXNwZXJhLGRjPXVzPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiIE5hbWU9ImVtYWlsIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj5qaW1teUBhc3BlcmFzb2Z0LmNvbTwvc2FtbDpBdHRyaWJ1dGVWYWx1ZT48L3NhbWw6QXR0cmlidXRlPjxzYW1sOkF0dHJpYnV0ZSBOYW1lRm9ybWF0PSJ1cm46b2FzaXM6bmFtZXM6dGM6U0FNTDoyLjA6YXR0cm5hbWUtZm9ybWF0OnVuc3BlY2lmaWVkIiBOYW1lPSJzdXJuYW1lIj48c2FtbDpBdHRyaWJ1dGVWYWx1ZSB4c2k6dHlwZT0ieHM6c3RyaW5nIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIj5Tb25nPC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PHNhbWw6QXR0cmlidXRlIE5hbWVGb3JtYXQ9InVybjpvYXNpczpuYW1lczp0YzpTQU1MOjIuMDphdHRybmFtZS1mb3JtYXQ6dW5zcGVjaWZpZWQiIE5hbWU9ImdpdmVuX25hbWUiPjxzYW1sOkF0dHJpYnV0ZVZhbHVlIHhzaTp0eXBlPSJ4czpzdHJpbmciIHhtbG5zOnhzaT0iaHR0cDovL3d3dy53My5vcmcvMjAwMS9YTUxTY2hlbWEtaW5zdGFuY2UiPkppbW15PC9zYW1sOkF0dHJpYnV0ZVZhbHVlPjwvc2FtbDpBdHRyaWJ1dGU+PC9zYW1sOkF0dHJpYnV0ZVN0YXRlbWVudD48L3NhbWw6QXNzZXJ0aW9uPjwvc2FtbHA6UmVzcG9uc2U+"
    @assertion_time = DateTime.new(2014,7,25,10,49,57,'-7')
    Timecop.freeze(@assertion_time)
  end

  describe "POST #token" do
    it "will generate a token given a valid SAML assertion" do
      post :token, grant_type: 'assertion', assertion: @assertion
      token = OauthToken.first
      expect(token).to_not be_nil
      expected_response = {:access_token  => token.access_token,
                           :token_type    => :bearer,
                           :refresh_token => token.refresh_token,
                           :expires_in    => Rails.application.config.token_expiration_window}.to_json
      expect(response.body).to eql(expected_response)
    end

    it "will not generate a token for invalid SAML assertions" do
      Timecop.freeze(@assertion_time + 1.month)
      post :token, grant_type: 'assertion', assertion: @assertion
      token = OauthToken.first
      expect(token).to be_nil
      expect(JSON.parse(response.body)["error"]).to eql("invalid_grant")
    end

    it "will generate a token given a valid refresh token" do
      token = FactoryGirl.create(:token)
      post :token, grant_type: 'refresh_token', refresh_token: token.refresh_token
      new_token_attr = JSON.parse(response.body)
      new_token = OauthToken.where("access_token = ? AND refresh_token = ?",
                    new_token_attr["access_token"], new_token_attr["refresh_token"])
      expect(new_token).to exist
    end

    it "will not generate a token for an invalid refresh token" do
      FactoryGirl.create(:token)
      random_token = SecureRandom.urlsafe_base64(16)
      post :token, grant_type: 'refresh_token', refresh_token: random_token
      expect(JSON.parse(response.body)["error"]).to eql("invalid_grant")
    end

    it "will not generate a token for unsupported grant types" do
      post :token, grant_type: "gqbweipgfisopdfjiaweorh"
      expect(JSON.parse(response.body)["error"]).to eql("unsupported_grant_type")
    end
  end

  describe "POST #verify" do
    it "will provide information for a user given the associated token" do
      token = FactoryGirl.create(:token)
      post :verify, token: token.access_token
      expect(response.body).to eql(token.user_attributes)
    end
  end
end